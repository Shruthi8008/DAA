#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_TREE_NODES 256

// A node in the Huffman tree
typedef struct Node {
    char character;
    int frequency;
    struct Node *left;
    struct Node *right;
} Node;

// A min-heap for the Huffman tree nodes
typedef struct MinHeap {
    int size;
    Node *array[MAX_TREE_NODES];
} MinHeap;

// Function to create a new node
Node* createNode(char character, int frequency) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->character = character;
    newNode->frequency = frequency;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Function to create a min-heap
MinHeap* createMinHeap() {
    MinHeap* minHeap = (MinHeap*)malloc(sizeof(MinHeap));
    minHeap->size = 0;
    return minHeap;
}

// Function to insert a node into the min-heap
void insertMinHeap(MinHeap* minHeap, Node* node) {
    minHeap->array[minHeap->size] = node;
    minHeap->size++;
}

// Function to build the min-heap
void buildMinHeap(MinHeap* minHeap) {
    for (int i = minHeap->size / 2 - 1; i >= 0; i--) {
        // Heapify
        // (This is a simplified version; in a complete implementation, you would want to ensure the heap property is maintained)
    }
}

// Function to extract the minimum node from the min-heap
Node* extractMin(MinHeap* minHeap) {
    Node* minNode = minHeap->array[0];
    minHeap->array[0] = minHeap->array[minHeap->size - 1];
    minHeap->size--;
    // Heapify
    // (This is a simplified version; in a complete implementation, you would want to ensure the heap property is maintained)
    return minNode;
}

// Function to build the Huffman tree
Node* buildHuffmanTree(char characters[], int frequencies[], int size) {
    MinHeap* minHeap = createMinHeap();
    
    // Create leaf nodes for each character and insert them into the min-heap
    for (int i = 0; i < size; i++) {
        Node* newNode = createNode(characters[i], frequencies[i]);
        insertMinHeap(minHeap, newNode);
    }

    // Build the Huffman tree
    while (minHeap->size > 1) {
        Node* left = extractMin(minHeap);
        Node* right = extractMin(minHeap);
        
        Node* newNode = createNode('\0', left->frequency + right->frequency);
        newNode->left = left;
        newNode->right = right;
        
        insertMinHeap(minHeap, newNode);
    }

    return extractMin(minHeap);
}

// Function to generate the Huffman codes
void generateHuffmanCodes(Node* root, char* code, int depth) {
    if (root->left) {
        code[depth] = '0';
        generateHuffmanCodes(root->left, code, depth + 1);
    }
    if (root->right) {
        code[depth] = '1';
        generateHuffmanCodes(root->right, code, depth + 1);
    }
    if (!root->left && !root->right) {
        code[depth] = '\0';
        printf("%c: %s\n", root->character, code);
    }
}

// Main function
int main() {
    char characters[] = {'a', 'b', 'c', 'd', 'e', 'f'};
    int frequencies[] = {5, 9, 12, 13, 16, 45};
    int size = sizeof(characters) / sizeof(characters[0]);

    Node* root = buildHuffmanTree(characters, frequencies, size);
    
    char code[MAX_TREE_NODES];
    generateHuffmanCodes(root, code, 0);

    return 0;
}
